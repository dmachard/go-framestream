package framestream

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"encoding/hex"
	"errors"
	"io"
	"net"
	"strings"
	"testing"
	"time"

	"github.com/segmentio/kafka-go/compress"
)

func TestFramestream_Handshake(t *testing.T) {
	client, server := net.Pipe()
	handshake := true

	// init framestream sender
	go func() {
		fs_server := NewFstrm(bufio.NewReader(server), bufio.NewWriter(server), server, 5*time.Second, []byte("frstrm"), handshake)
		if err := fs_server.InitSender(); err != nil {
			t.Errorf("error to init framestream sender: %s", err)
		}
	}()

	// init framestream receiver
	fs_client := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 5*time.Second, []byte("frstrm"), handshake)
	if err := fs_client.InitReceiver(); err != nil {
		t.Errorf("error to init framestream receiver: %s", err)
	}
}

func TestRecvFrame_DataFrame(t *testing.T) {
	client, server := net.Pipe()
	defer client.Close()
	defer server.Close()

	go func() {
		defer server.Close()
		// Frame data = [1,2,3,4]
		data := []byte{1, 2, 3, 4}
		var buf bytes.Buffer
		binary.Write(&buf, binary.BigEndian, uint32(len(data)))
		buf.Write(data)
		server.Write(buf.Bytes())
	}()

	fs := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 2*time.Second, []byte("ctype"), false)

	frame, err := fs.RecvFrame(true)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	if frame.control {
		t.Fatalf("expected data frame, got control frame")
	}
	if !bytes.Equal(frame.Data(), []byte{1, 2, 3, 4}) {
		t.Fatalf("unexpected data: got %v", frame.Data())
	}
}

func TestRecvFrame_ControlFrame(t *testing.T) {
	client, server := net.Pipe()
	defer client.Close()
	defer server.Close()

	go func() {
		defer server.Close()

		controlData := []byte{9, 9, 9, 9}
		var buf bytes.Buffer

		// Write first 4 bytes = 0 to indicate control frame
		binary.Write(&buf, binary.BigEndian, uint32(0))
		// Then write 4 bytes for length of control payload
		binary.Write(&buf, binary.BigEndian, uint32(len(controlData)))
		// Write the actual control frame data
		buf.Write(controlData)

		server.Write(buf.Bytes())
	}()

	fs := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 2*time.Second, []byte("ctype"), false)

	frame, err := fs.RecvFrame(true)
	if err != nil {
		t.Fatalf("unexpected error: %v", err)
	}
	if !frame.IsControl() {
		t.Fatalf("expected control frame, got data frame")
	}
	if !bytes.Equal(frame.Data(), []byte{0, 0, 0, 4, 9, 9, 9, 9}) {
		t.Fatalf("unexpected control data: got %v", frame.Data())
	}
}

func TestRecvFrame_ReaderNotReady(t *testing.T) {
	fs := NewFstrm(nil, nil, nil, 0, []byte("ctype"), false)

	_, err := fs.RecvFrame(false)
	if !errors.Is(err, ErrReaderNotReady) {
		t.Fatalf("expected ErrReaderNotReady, got: %v", err)
	}
}

func TestRecvFrame_FrameTooLarge(t *testing.T) {
	client, server := net.Pipe()
	defer client.Close()
	defer server.Close()

	go func() {
		defer server.Close()
		binary.Write(server, binary.BigEndian, uint32(DATA_FRAME_LENGTH_MAX+1))
	}()

	fs := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 1*time.Second, []byte("ctype"), false)

	_, err := fs.RecvFrame(true)
	if !errors.Is(err, ErrFrameTooLarge) {
		t.Fatalf("expected ErrFrameTooLarge, got: %v", err)
	}
}

func TestFramestream_CompressedData(t *testing.T) {
	client, server := net.Pipe()
	handshake := true

	contentType := "protobuf:dnstap.Dnstap"
	frameData := []byte{1, 2, 3, 4}
	// init framestream sender
	go func() {
		fs_server := NewFstrm(bufio.NewReader(server), bufio.NewWriter(server), server, 5*time.Second, []byte(contentType), handshake)
		if err := fs_server.InitSender(); err != nil {
			t.Errorf("error to init framestream sender: %s", err)
		}

		// send frame
		frame := &Frame{}
		if err := frame.Write(frameData); err != nil {
			t.Errorf("error to init frame: %s", err)
		}
		if err := fs_server.SendCompressedFrame(&compress.GzipCodec, frame); err != nil {
			t.Errorf("error to send frame: %s", err)
		}
	}()

	// init framestream receiver
	fs_client := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 5*time.Second, []byte(contentType), handshake)
	if err := fs_client.InitReceiver(); err != nil {
		t.Errorf("error to init framestream receiver: %s", err)
	}

	// receive frame, timeout 5s
	frame, err := fs_client.RecvCompressedFrame(&compress.GzipCodec, true)
	if err != nil {
		t.Errorf("error to receive frame: %s", err)
	}

	// read frame len (4 bytes)
	var n uint32
	if len(frame.Data()) < 4 {
		t.Errorf("error to read frame too short")
	}

	buf := bytes.NewReader(frame.Data())
	if err := binary.Read(buf, binary.BigEndian, &n); err != nil {
		t.Errorf("error to read frame len: %s", err)
	}

	if n > uint32(len(frame.Data()[4:])) {
		t.Errorf("no enough data")
	}

	data := frame.Data()[4 : 4+n]
	if !bytes.Equal(data, frameData) {
		t.Errorf("frame data not equal")
	}
}

func TestFramestream_SliceBoundsPanic_Issue974(t *testing.T) {
	client, server := net.Pipe()
	handshake := false // handshake not required for this test

	// Simulate a server that sends an oversized control frame
	go func() {
		defer server.Close()

		var payloadLen uint32 = 227195

		// Build a control frame:
		// - First 4 bytes: zero => indicates a control frame
		// - Next 4 bytes: actual length of the control payload
		var buf bytes.Buffer
		binary.Write(&buf, binary.BigEndian, uint32(0))  // control frame indicator
		binary.Write(&buf, binary.BigEndian, payloadLen) // control payload length
		buf.Write(make([]byte, payloadLen))              // dummy payload (zeros)

		server.Write(buf.Bytes()) // send it to the client
	}()

	// Framestream client that will read the malformed frame
	fsClient := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 2*time.Second, []byte("dummy"), handshake)

	_, err := fsClient.RecvFrame(true)
	if !errors.Is(err, ErrFrameTooLarge) {
		t.Fatalf("unexpected error: got %v, want ErrFrameTooLarge", err)
	}
}

func TestRecvFrame_RawDataFrame(t *testing.T) {
	// raw data extracted from pcap file (data frame only in this payload)
	hexInput := `
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130d5d6022a04ac140002383540f8f2acc0064dca57fc1b5234cf8b01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00080de5212a2cb396fd1a00000000e90a0a646e73646973745f76321214646e736469737420322
e302e302d616c70686131780172b9010806180110012204ac14000130d5d6022a04ac140002383540f8f2acc0064dca57fc1b60f8f2
acc0066d70c0c11c728801cf8b81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000000c8000417d
7008ac00c00010001000000c8000417c0e450c00c00010001000000c80004600780c6c00c00010001000000c8000417d70088c00c00
010001000000c8000417c0e454c00c00010001000000c80004600780af00002904d00000000000001a0764656661756c74
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130b1ce022a04ac140002383540fdf2acc0064da7199b1e52347ac201200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a0008fff006c7c33a7e921a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130b1ce022a04ac140002383540fdf2acc0064da7
199b1e60fdf2acc0066d46399c1e7288017ac281800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000c3000417d7008ac00c00010001000000c3000417c0e450c00c00010001000000c30004600780c6c00c00010001000000c3000417
d70088c00c00010001000000c3000417c0e454c00c00010001000000c30004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130cef5022a04ac140002383540fef2acc0064daa4338395234eb3a01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a000867080e39afb09ce01a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130cef5022a04ac140002383540fef2acc0064daa
43383960fef2acc0066dba203939728801eb3a81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000c2000417d7008ac00c00010001000000c2000417c0e450c00c00010001000000c20004600780c6c00c00010001000000c2000417
d70088c00c00010001000000c2000417c0e454c00c00010001000000c20004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130bade022a04ac14000238354084f3acc0064dd373ab325234eb0701200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a0008b2aba6eec88f49511a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130bade022a04ac14000238354084f3acc0064dd3
73ab326084f3acc0066df799ac32728801eb0781800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bc000417d7008ac00c00010001000000bc000417c0e450c00c00010001000000bc0004600780c6c00c00010001000000bc000417
d70088c00c00010001000000bc000417c0e454c00c00010001000000bc0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
13094c3022a04ac14000238354085f3acc0064d3d9ac814523401c201200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a000856732de27bf036721a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac1400013094c3022a04ac14000238354085f3acc0064d3d
9ac8146085f3acc0066d66bcc91472880101c281800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417
d70088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130e49f032a04ac14000238354085f3acc0064d5b5bae24523496ce01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00088b357689c486c94e1a00000000ee0a10646e73646973745f76325f63616368651214646e7364
69737420322e302e302d616c70686131780172b9010806180110012204ac14000130e49f032a04ac14000238354085f3acc0064d5b5b
ae246085f3acc0066d9d6caf2472880196ce81800001000600000001076578616d706c6503636f6d0000010001c00c0001000100000
0bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417d70
088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130b09c022a04ac14000238354085f3acc0064dc2ded23152345b9a01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00081bc9d01d9a8935c21a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130b09c022a04ac14000238354085f3acc0064dc2
ded2316085f3acc0066d79ffd3317288015b9a81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417
d70088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
`
	hexInput = strings.ReplaceAll(hexInput, "\n", "")
	data, err := hex.DecodeString(hexInput)
	if err != nil {
		t.Fatalf("invalid hex input: %v", err)
	}

	client, server := net.Pipe()
	defer client.Close()
	defer server.Close()

	go func() {
		defer server.Close()
		server.Write(data)
	}()

	fs := NewFstrm(bufio.NewReader(client), bufio.NewWriter(client), client, 5*time.Second, []byte("ctype"), false)

	var frameCount int
	for {
		frame, err := fs.RecvFrame(true)
		if err == io.EOF {
			break
		}
		if err != nil {
			t.Fatalf("error reading frame %d: %v", frameCount+1, err)
		}

		if frame.IsControl() {
			t.Errorf("unexpected control frame at index %d", frameCount+1)
		}
		frameCount++
	}

	expected := 14
	if frameCount != expected {
		t.Fatalf("expected %d frames, got %d", expected, frameCount)
	}
}

func BenchmarkRecvFrame_RawDataFrame(b *testing.B) {
	// raw data extracted from pcap file (data frame only in this payload)
	hexInput := `
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130d5d6022a04ac140002383540f8f2acc0064dca57fc1b5234cf8b01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00080de5212a2cb396fd1a00000000e90a0a646e73646973745f76321214646e736469737420322
e302e302d616c70686131780172b9010806180110012204ac14000130d5d6022a04ac140002383540f8f2acc0064dca57fc1b60f8f2
acc0066d70c0c11c728801cf8b81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000000c8000417d
7008ac00c00010001000000c8000417c0e450c00c00010001000000c80004600780c6c00c00010001000000c8000417d70088c00c00
010001000000c8000417c0e454c00c00010001000000c80004600780af00002904d00000000000001a0764656661756c74
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130b1ce022a04ac140002383540fdf2acc0064da7199b1e52347ac201200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a0008fff006c7c33a7e921a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130b1ce022a04ac140002383540fdf2acc0064da7
199b1e60fdf2acc0066d46399c1e7288017ac281800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000c3000417d7008ac00c00010001000000c3000417c0e450c00c00010001000000c30004600780c6c00c00010001000000c3000417
d70088c00c00010001000000c3000417c0e454c00c00010001000000c30004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130cef5022a04ac140002383540fef2acc0064daa4338395234eb3a01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a000867080e39afb09ce01a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130cef5022a04ac140002383540fef2acc0064daa
43383960fef2acc0066dba203939728801eb3a81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000c2000417d7008ac00c00010001000000c2000417c0e450c00c00010001000000c20004600780c6c00c00010001000000c2000417
d70088c00c00010001000000c2000417c0e454c00c00010001000000c20004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130bade022a04ac14000238354084f3acc0064dd373ab325234eb0701200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a0008b2aba6eec88f49511a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130bade022a04ac14000238354084f3acc0064dd3
73ab326084f3acc0066df799ac32728801eb0781800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bc000417d7008ac00c00010001000000bc000417c0e450c00c00010001000000bc0004600780c6c00c00010001000000bc000417
d70088c00c00010001000000bc000417c0e454c00c00010001000000bc0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
13094c3022a04ac14000238354085f3acc0064d3d9ac814523401c201200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a000856732de27bf036721a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac1400013094c3022a04ac14000238354085f3acc0064d3d
9ac8146085f3acc0066d66bcc91472880101c281800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417
d70088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130e49f032a04ac14000238354085f3acc0064d5b5bae24523496ce01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00088b357689c486c94e1a00000000ee0a10646e73646973745f76325f63616368651214646e7364
69737420322e302e302d616c70686131780172b9010806180110012204ac14000130e49f032a04ac14000238354085f3acc0064d5b5b
ae246085f3acc0066d9d6caf2472880196ce81800001000600000001076578616d706c6503636f6d0000010001c00c0001000100000
0bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417d70
088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
000000810a0a646e73646973745f76321214646e736469737420322e302e302d616c70686131780172590805180110012204ac14000
130b09c022a04ac14000238354085f3acc0064dc2ded23152345b9a01200001000000000001076578616d706c6503636f6d00000100
0100002904d000000000000c000a00081bc9d01d9a8935c21a00000000ee0a10646e73646973745f76325f63616368651214646e736
469737420322e302e302d616c70686131780172b9010806180110012204ac14000130b09c022a04ac14000238354085f3acc0064dc2
ded2316085f3acc0066d79ffd3317288015b9a81800001000600000001076578616d706c6503636f6d0000010001c00c00010001000
000bb000417d7008ac00c00010001000000bb000417c0e450c00c00010001000000bb0004600780c6c00c00010001000000bb000417
d70088c00c00010001000000bb000417c0e454c00c00010001000000bb0004600780af00002904d00000000000001a06636163686564
`
	hexInput = strings.ReplaceAll(hexInput, "\n", "")
	data, err := hex.DecodeString(hexInput)
	if err != nil {
		b.Fatalf("invalid hex input: %v", err)
	}

	for i := 0; i < b.N; i++ {
		reader := bufio.NewReader(bytes.NewReader(data))
		fs := NewFstrm(reader, nil, nil, 0, []byte("ctype"), false)

		var frameCount int
		for {
			frame, err := fs.RecvFrame(true)
			if err == io.EOF {
				break
			}
			if err != nil {
				b.Fatalf("error reading frame %d: %v", frameCount+1, err)
			}
			if frame.IsControl() {
				b.Fatalf("unexpected control frame at index %d", frameCount+1)
			}
			frameCount++
		}

		const expected = 14
		if frameCount != expected {
			b.Fatalf("expected %d frames, got %d", expected, frameCount)
		}
	}
}
